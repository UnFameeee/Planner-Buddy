<%- include('../partials/header') %>

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3">Edit Appointment</h1>
    <a href="/appointments/calendar" class="btn btn-secondary">
      <i class="fas fa-arrow-left"></i> Back to Calendar
    </a>
  </div>
  
  <div class="card shadow mb-4">
    <div class="card-header py-3">
      <h6 class="m-0 fw-bold text-primary">Appointment Information</h6>
    </div>
    <div class="card-body">
      <div id="loadingSpinner" class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading appointment data...</p>
      </div>
      
      <form id="editAppointmentForm" style="display: none;">
        <input type="hidden" id="appointmentId">
        
        <div class="mb-3">
          <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
          <input type="text" class="form-control" id="title" name="title" required>
          <div class="invalid-feedback">Title is required</div>
        </div>
        
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="appointmentDate" class="form-label">Date and Time <span class="text-danger">*</span></label>
            <input type="datetime-local" class="form-control" id="appointmentDate" name="appointmentDate" required>
            <div class="invalid-feedback">Date and time are required</div>
          </div>
          
          <div class="col-md-6">
            <label for="duration" class="form-label">Duration (minutes)</label>
            <input type="number" class="form-control" id="duration" name="duration" min="15" step="15" value="60">
            <div class="form-text">Default is 60 minutes</div>
          </div>
        </div>
        
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="appointmentType" class="form-label">Type</label>
            <select class="form-select" id="appointmentType" name="appointmentType">
              <option value="">Select type</option>
              <option value="meeting">Meeting</option>
              <option value="personal">Personal</option>
              <option value="medical">Medical</option>
              <option value="reminder">Reminder</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div class="col-md-6">
            <label for="location" class="form-label">Location</label>
            <input type="text" class="form-control" id="location" name="location" placeholder="Where the appointment will take place">
          </div>
        </div>
        
        <div class="mb-3">
          <label for="notes" class="form-label">Notes</label>
          <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="Additional details about the appointment"></textarea>
        </div>
        
        <div class="mb-3 form-check">
          <input type="checkbox" class="form-check-input" id="reminderEnabled" name="reminderEnabled">
          <label class="form-check-label" for="reminderEnabled">Set Reminder</label>
        </div>
        
        <div id="reminderOptions" class="mb-3 ps-4 border-start" style="display: none;">
          <div class="row">
            <div class="col-md-6">
              <label for="reminderTime" class="form-label">Remind me</label>
              <select class="form-select" id="reminderTime" name="reminderTime">
                <option value="15">15 minutes before</option>
                <option value="30">30 minutes before</option>
                <option value="60" selected>1 hour before</option>
                <option value="120">2 hours before</option>
                <option value="1440">1 day before</option>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="reminderMethod" class="form-label">Reminder method</label>
              <select class="form-select" id="reminderMethod" name="reminderMethod">
                <option value="email">Email</option>
                <option value="notification">In-app notification</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
          <button type="button" class="btn btn-danger me-auto" id="deleteAppointmentBtn">Delete Appointment</button>
          <button type="button" class="btn btn-secondary me-md-2" onclick="window.location.href='/appointments/calendar'">Cancel</button>
          <button type="submit" class="btn btn-primary">Update Appointment</button>
        </div>
      </form>
      
      <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    
    if (!token) {
      window.location.href = '/auth/login';
      return;
    }
    
    // Get appointment ID from URL
    const pathParts = window.location.pathname.split('/');
    const appointmentId = pathParts[pathParts.length - 1];
    
    if (!appointmentId) {
      showError('Appointment ID is missing from the URL');
      return;
    }
    
    document.getElementById('appointmentId').value = appointmentId;
    
    // Elements
    const loadingSpinner = document.getElementById('loadingSpinner');
    const editAppointmentForm = document.getElementById('editAppointmentForm');
    const errorMessage = document.getElementById('errorMessage');
    const reminderEnabled = document.getElementById('reminderEnabled');
    const reminderOptions = document.getElementById('reminderOptions');
    const deleteAppointmentBtn = document.getElementById('deleteAppointmentBtn');
    
    // Toggle reminder options
    reminderEnabled.addEventListener('change', function() {
      reminderOptions.style.display = this.checked ? 'block' : 'none';
    });
    
    // Load appointment data
    fetch(`/api/appointments/${appointmentId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => response.json())
    .then(data => {
      loadingSpinner.style.display = 'none';
      
      if (data.success) {
        const appointment = data.data;
        
        // Fill form fields
        document.getElementById('title').value = appointment.title || '';
        document.getElementById('appointmentType').value = appointment.appointment_type || '';
        document.getElementById('location').value = appointment.location || '';
        document.getElementById('notes').value = appointment.notes || '';
        document.getElementById('duration').value = appointment.duration || 60;
        
        // Handle appointment date
        if (appointment.appointment_date) {
          // Convert to local datetime-local format
          const appointmentDate = new Date(appointment.appointment_date);
          const year = appointmentDate.getFullYear();
          const month = String(appointmentDate.getMonth() + 1).padStart(2, '0');
          const day = String(appointmentDate.getDate()).padStart(2, '0');
          const hours = String(appointmentDate.getHours()).padStart(2, '0');
          const minutes = String(appointmentDate.getMinutes()).padStart(2, '0');
          
          document.getElementById('appointmentDate').value = `${year}-${month}-${day}T${hours}:${minutes}`;
        }
        
        // Handle reminder
        if (appointment.reminder) {
          reminderEnabled.checked = true;
          reminderOptions.style.display = 'block';
          document.getElementById('reminderTime').value = appointment.reminder.time || 60;
          document.getElementById('reminderMethod').value = appointment.reminder.method || 'email';
        }
        
        // Show form
        editAppointmentForm.style.display = 'block';
      } else {
        showError(data.message || 'Failed to load appointment data');
      }
    })
    .catch(error => {
      loadingSpinner.style.display = 'none';
      console.error('Error loading appointment:', error);
      showError('An error occurred while loading the appointment. Please try again.');
    });
    
    // Handle form submission
    editAppointmentForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Clear previous validation
      clearValidation();
      
      // Validate form
      if (!validateForm()) {
        return;
      }
      
      // Collect form data
      const appointmentData = {
        title: document.getElementById('title').value.trim(),
        appointment_date: new Date(document.getElementById('appointmentDate').value).toISOString(),
        duration: parseInt(document.getElementById('duration').value),
        appointment_type: document.getElementById('appointmentType').value,
        location: document.getElementById('location').value.trim(),
        notes: document.getElementById('notes').value.trim()
      };
      
      // Add reminder if enabled
      if (reminderEnabled.checked) {
        appointmentData.reminder = {
          time: parseInt(document.getElementById('reminderTime').value),
          method: document.getElementById('reminderMethod').value
        };
      }
      
      // Update appointment
      fetch(`/api/appointments/${appointmentId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(appointmentData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Redirect to calendar
          window.location.href = '/appointments/calendar';
        } else {
          // Show error
          showError(data.message || 'Failed to update appointment');
        }
      })
      .catch(error => {
        console.error('Error updating appointment:', error);
        showError('An error occurred while updating the appointment. Please try again.');
      });
    });
    
    // Handle delete button
    deleteAppointmentBtn.addEventListener('click', function() {
      if (confirm('Are you sure you want to delete this appointment?')) {
        // Delete appointment
        fetch(`/api/appointments/${appointmentId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Redirect to calendar
            window.location.href = '/appointments/calendar';
          } else {
            // Show error
            showError(data.message || 'Failed to delete appointment');
          }
        })
        .catch(error => {
          console.error('Error deleting appointment:', error);
          showError('An error occurred while deleting the appointment. Please try again.');
        });
      }
    });
    
    // Function to validate form
    function validateForm() {
      let isValid = true;
      
      // Validate title
      const title = document.getElementById('title');
      if (!title.value.trim()) {
        title.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate appointment date
      const appointmentDate = document.getElementById('appointmentDate');
      if (!appointmentDate.value) {
        appointmentDate.classList.add('is-invalid');
        isValid = false;
      }
      
      return isValid;
    }
    
    // Function to clear validation
    function clearValidation() {
      const invalidInputs = document.querySelectorAll('.is-invalid');
      invalidInputs.forEach(input => {
        input.classList.remove('is-invalid');
      });
      
      errorMessage.style.display = 'none';
    }
    
    // Function to show error
    function showError(message) {
      errorMessage.textContent = message;
      errorMessage.style.display = 'block';
      loadingSpinner.style.display = 'none';
    }
    
    // Add event listeners to fields for validation on input
    document.getElementById('title').addEventListener('input', function() {
      this.classList.remove('is-invalid');
    });
    
    document.getElementById('appointmentDate').addEventListener('input', function() {
      this.classList.remove('is-invalid');
    });
  });
</script>

<%- include('../partials/footer') %> 