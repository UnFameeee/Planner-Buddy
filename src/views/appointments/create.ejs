<%- include('../partials/header') %>

<div class="container-fluid py-4">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1 class="h3 mb-0">Schedule Appointment</h1>
          <p class="text-muted mb-0">Create a new appointment in your calendar</p>
        </div>
        <a href="/appointments/calendar" class="btn btn-outline-primary">
          <i class="fas fa-calendar me-2"></i>Back to Calendar
        </a>
      </div>

      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <div class="card shadow border-0" style="background: #ffffff; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px, rgba(0, 0, 0, 0.05) 0px 1px 3px !important;">
        <div class="card-body p-4">
          <% if (user) { %>
            <form id="createAppointmentForm" class="needs-validation" novalidate>
              <div class="row g-4">
                <div class="col-12">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="title" name="title" placeholder="Enter appointment title" required>
                    <label for="title">Title <span class="text-danger">*</span></label>
                    <div class="invalid-feedback">Please enter a title for your appointment</div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-floating">
                    <input type="datetime-local" class="form-control" id="startTime" name="startTime" required>
                    <label for="startTime">Start Time <span class="text-danger">*</span></label>
                    <div class="invalid-feedback">Please select a start time</div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-floating">
                    <input type="datetime-local" class="form-control" id="endTime" name="endTime" required>
                    <label for="endTime">End Time <span class="text-danger">*</span></label>
                    <div class="invalid-feedback">Please select an end time</div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-floating">
                    <select class="form-select" id="appointmentType" name="appointmentType" required>
                      <option value="">Select type</option>
                      <option value="meeting">Meeting</option>
                      <option value="personal">Personal</option>
                      <option value="medical">Medical</option>
                      <option value="other">Other</option>
                    </select>
                    <label for="appointmentType">Type <span class="text-danger">*</span></label>
                    <div class="invalid-feedback">Please select an appointment type</div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="location" name="location" placeholder="Enter location">
                    <label for="location">Location</label>
                  </div>
                </div>

                <div class="col-12">
                  <div class="form-floating">
                    <textarea class="form-control" id="description" name="description" style="height: 100px" placeholder="Enter description"></textarea>
                    <label for="description">Description</label>
                  </div>
                </div>

                <div class="col-12">
                  <div class="form-check form-switch">
                    <input type="checkbox" class="form-check-input" id="setReminder" name="setReminder" role="switch">
                    <label class="form-check-label" for="setReminder">Set Reminder</label>
                  </div>
                </div>

                <div id="reminderOptions" class="col-12 d-none">
                  <div class="row g-3">
                    <div class="col-md-6">
                      <div class="form-floating">
                        <select class="form-select" id="reminderTime" name="reminderTime">
                          <option value="5">5 minutes before</option>
                          <option value="10">10 minutes before</option>
                          <option value="15">15 minutes before</option>
                          <option value="30">30 minutes before</option>
                          <option value="60">1 hour before</option>
                          <option value="1440">1 day before</option>
                        </select>
                        <label for="reminderTime">Reminder Time</label>
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="form-floating">
                        <select class="form-select" id="reminderMethod" name="reminderMethod">
                          <option value="notification">Browser Notification</option>
                          <option value="email">Email</option>
                          <option value="both">Both</option>
                        </select>
                        <label for="reminderMethod">Reminder Method</label>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="col-12">
                  <hr class="my-4">
                  <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-light" onclick="window.location.href='/appointments/calendar'">
                      <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary px-4">
                      <i class="fas fa-calendar-plus me-2"></i>Create Appointment
                    </button>
                  </div>
                </div>
              </div>
            </form>
          <% } else { %>
            <div class="alert alert-warning d-flex align-items-center" role="alert">
              <i class="fas fa-exclamation-triangle me-3 fs-4"></i>
              <div>
                <h6 class="alert-heading mb-1">Authentication Required</h6>
                <p class="mb-0">You need to be logged in to create appointments. <a href="/auth/login" class="alert-link">Login here</a> to continue.</p>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<% if (user) { %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('createAppointmentForm');
    const setReminderSwitch = document.getElementById('setReminder');
    const reminderOptions = document.getElementById('reminderOptions');
    
    // Helper function to format date for datetime-local input
    function formatDateTimeForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    }
    
    // Helper function to round time to nearest 30 minutes
    function roundToNearestThirtyMinutes(date) {
      const minutes = date.getMinutes();
      const roundedMinutes = Math.ceil(minutes / 30) * 30;
      const newDate = new Date(date);
      if (roundedMinutes === 60) {
        newDate.setHours(date.getHours() + 1);
        newDate.setMinutes(0);
      } else {
        newDate.setMinutes(roundedMinutes);
      }
      newDate.setSeconds(0);
      newDate.setMilliseconds(0);
      return newDate;
    }
    
    // Set default start time to current time rounded to next 30 minutes
    const now = roundToNearestThirtyMinutes(new Date());
    
    // Set default end time to 1 hour after start time
    const end = new Date(now);
    end.setHours(end.getHours() + 1);
    
    // Set the input values using local time
    document.getElementById('startTime').value = formatDateTimeForInput(now);
    document.getElementById('endTime').value = formatDateTimeForInput(end);
    
    // Update end time when start time changes
    document.getElementById('startTime').addEventListener('change', function(e) {
      const startTime = new Date(e.target.value);
      const endTime = new Date(startTime);
      endTime.setHours(endTime.getHours() + 1);
      document.getElementById('endTime').value = formatDateTimeForInput(endTime);
    });
    
    // Toggle reminder options visibility
    setReminderSwitch.addEventListener('change', function() {
      reminderOptions.classList.toggle('d-none', !this.checked);
    });
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!form.checkValidity()) {
        e.stopPropagation();
        form.classList.add('was-validated');
        return;
      }
      
      // Get form values
      const title = document.getElementById('title').value;
      const startTimeInput = document.getElementById('startTime').value;
      const endTimeInput = document.getElementById('endTime').value;
      const appointmentType = document.getElementById('appointmentType').value;
      const location = document.getElementById('location').value;
      const description = document.getElementById('description').value;
      const setReminder = document.getElementById('setReminder').checked;
      
      // Convert datetime-local input format to ISO string
      const startTime = new Date(startTimeInput).toISOString();
      const endTime = new Date(endTimeInput).toISOString();
      
      const formData = {
        title,
        start_time: startTime,
        end_time: endTime,
        appointment_type: appointmentType,
        location,
        description,
        set_reminder: setReminder
      };
      
      if (setReminder) {
        const reminderMinutes = parseInt(document.getElementById('reminderTime').value);
        const reminderMethod = document.getElementById('reminderMethod').value;
        
        // Calculate reminder time by subtracting minutes from start time
        const reminderDate = new Date(startTimeInput);
        reminderDate.setMinutes(reminderDate.getMinutes() - reminderMinutes);
        
        formData.reminder_time = reminderDate.toISOString();
        formData.reminder_method = reminderMethod;
      }
      
      try {
        const submitButton = form.querySelector('button[type="submit"]');
        const originalContent = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Creating...';
        
        console.log('Sending appointment data:', formData);
        
        const response = await axios.post('/api/appointments', formData);
        
        console.log('Response received:', response.data);
        
        if (response.data.success) {
          window.location.href = '/appointments/calendar';
        } else {
          showToast('error', response.data.message || 'Failed to create appointment');
          submitButton.disabled = false;
          submitButton.innerHTML = originalContent;
        }
      } catch (error) {
        console.error('Error creating appointment:', error);
        console.error('Error details:', error.response?.data || 'No response data');
        showToast('error', error.response?.data?.message || 'Error creating appointment. Check console for details.');
        
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = false;
        submitButton.innerHTML = '<i class="fas fa-calendar-plus me-2"></i>Create Appointment';
      }
    });
  });

  function showToast(type, message) {
    const toastEl = document.createElement('div');
    toastEl.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : 'success'} border-0 position-fixed bottom-0 end-0 m-3`;
    toastEl.setAttribute('role', 'alert');
    toastEl.setAttribute('aria-live', 'assertive');
    toastEl.setAttribute('aria-atomic', 'true');
    
    toastEl.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `;
    
    document.body.appendChild(toastEl);
    const toast = new bootstrap.Toast(toastEl);
    toast.show();
    
    toastEl.addEventListener('hidden.bs.toast', () => {
      toastEl.remove();
    });
  }
</script>
<% } %>

<%- include('../partials/footer') %> 