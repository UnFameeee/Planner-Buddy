<script>
  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    
    // Don't redirect if no token, auth middleware will handle that
    if (!token) {
      console.warn('No authentication token found');
      // Continue without redirecting - the auth middleware will handle this
    }
    
    // Elements
    const calendarTitle = document.getElementById('calendarTitle');
    const monthViewBody = document.getElementById('monthViewBody');
    const weekViewHeader = document.getElementById('weekViewHeader');
    const weekViewBody = document.getElementById('weekViewBody');
    const dayViewHeader = document.getElementById('dayViewHeader');
    const dayViewBody = document.getElementById('dayViewBody');
    const upcomingList = document.getElementById('upcomingList');
    
    // View controls
    const monthView = document.getElementById('monthView');
    const weekView = document.getElementById('weekView');
    const dayView = document.getElementById('dayView');
    
    // Buttons
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const todayBtn = document.getElementById('todayBtn');
    const monthViewBtn = document.getElementById('monthViewBtn');
    const weekViewBtn = document.getElementById('weekViewBtn');
    const dayViewBtn = document.getElementById('dayViewBtn');
    
    // Modal elements
    const appointmentModal = new bootstrap.Modal(document.getElementById('appointmentModal'));
    const modalTitle = document.getElementById('modalTitle');
    const modalDate = document.getElementById('modalDate');
    const modalTime = document.getElementById('modalTime');
    const modalType = document.getElementById('modalType');
    const modalLocation = document.getElementById('modalLocation');
    const modalNotes = document.getElementById('modalNotes');
    const editAppointmentBtn = document.getElementById('editAppointmentBtn');
    
    // Current state
    let currentDate = new Date();
    // Set initial view based on server-side parameter (passed via global variable)
    let currentView = window.initialCalendarView || 'month';
    let appointments = [];
    
    // Initialize calendar
    function initCalendar() {
      // Set the initial view UI before loading appointments
      setView(currentView, false); // false = don't reload appointments yet
      
      loadAppointments();
      
      // Set up event listeners
      prevBtn.addEventListener('click', goToPrevious);
      nextBtn.addEventListener('click', goToNext);
      todayBtn.addEventListener('click', goToToday);
      
      monthViewBtn.addEventListener('click', function() {
        setView('month');
      });
      
      weekViewBtn.addEventListener('click', function() {
        setView('week');
      });
      
      dayViewBtn.addEventListener('click', function() {
        setView('day');
      });
    }
    
    // Load appointments from API
    function loadAppointments() {
      // Start and end dates based on current view
      let startDate, endDate;
      
      if (currentView === 'month') {
        const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        
        // Adjust to include visible days from previous and next months
        startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - startDate.getDay());
        
        endDate = new Date(lastDay);
        endDate.setDate(endDate.getDate() + (6 - endDate.getDay()));
      } else if (currentView === 'week') {
        startDate = getFirstDayOfWeek(currentDate);
        endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 6);
      } else { // day view
        startDate = new Date(currentDate);
        endDate = new Date(currentDate);
      }
      
      const formattedStartDate = formatDateForAPI(startDate);
      const formattedEndDate = formatDateForAPI(endDate);
      
      // If no token, just render empty calendar
      if (!token) {
        appointments = [];
        renderCalendar();
        return;
      }
      
      // Fetch appointments for the given date range
      fetch(`/appointments?startDate=${formattedStartDate}&endDate=${formattedEndDate}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          appointments = data.data || [];
          renderCalendar();
          loadUpcomingAppointments();
        } else {
          console.error('Error loading appointments:', data.message);
        }
      })
      .catch(error => {
        console.error('Error fetching appointments:', error);
      });
    }
    
    // Load upcoming appointments
    function loadUpcomingAppointments() {
      // If no token, just show no appointments message
      if (!token) {
        upcomingList.innerHTML = `
          <tr>
            <td colspan="7" class="text-center">Please log in to view appointments</td>
          </tr>
        `;
        return;
      }
      
      fetch('/appointments/upcoming', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const upcomingAppointments = data.data || [];
          
          if (upcomingAppointments.length > 0) {
            let html = '';
            
            upcomingAppointments.forEach(appointment => {
              const date = new Date(appointment.appointment_date);
              const formattedDate = date.toLocaleDateString();
              const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
              
              html += `
                <tr>
                  <td>${appointment.title}</td>
                  <td>${formattedDate}</td>
                  <td>${formattedTime}</td>
                  <td>${appointment.appointment_type || '-'}</td>
                  <td>${appointment.location || '-'}</td>
                  <td>${appointment.notes ? appointment.notes.substring(0, 30) + (appointment.notes.length > 30 ? '...' : '') : '-'}</td>
                  <td>
                    <div class="btn-group btn-group-sm" role="group">
                      <button type="button" class="btn btn-outline-primary view-btn" data-id="${appointment.id}">
                        <i class="fas fa-eye"></i>
                      </button>
                      <a href="/appointments/view/edit/${appointment.id}" class="btn btn-outline-secondary">
                        <i class="fas fa-edit"></i>
                      </a>
                      <button type="button" class="btn btn-outline-danger delete-btn" data-id="${appointment.id}">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              `;
            });
            
            upcomingList.innerHTML = html;
            
            // Add event listeners
            document.querySelectorAll('.view-btn').forEach(btn => {
              btn.addEventListener('click', function() {
                const appointmentId = this.getAttribute('data-id');
                showAppointmentDetails(appointmentId);
              });
            });
            
            document.querySelectorAll('.delete-btn').forEach(btn => {
              btn.addEventListener('click', function() {
                const appointmentId = this.getAttribute('data-id');
                deleteAppointment(appointmentId);
              });
            });
          } else {
            upcomingList.innerHTML = `
              <tr>
                <td colspan="7" class="text-center">No upcoming appointments</td>
              </tr>
            `;
          }
        } else {
          upcomingList.innerHTML = `
            <tr>
              <td colspan="7" class="text-center text-danger">${data.message}</td>
            </tr>
          `;
        }
      })
      .catch(error => {
        console.error('Error fetching upcoming appointments:', error);
        upcomingList.innerHTML = `
          <tr>
            <td colspan="7" class="text-center text-danger">Error loading appointments</td>
          </tr>
        `;
      });
    }
    
    // Set current view (month, week, day)
    function setView(view, reloadData = true) {
      currentView = view;
      
      // Update UI
      monthView.style.display = view === 'month' ? 'block' : 'none';
      weekView.style.display = view === 'week' ? 'block' : 'none';
      dayView.style.display = view === 'day' ? 'block' : 'none';
      
      // Update button active states
      monthViewBtn.classList.remove('active');
      weekViewBtn.classList.remove('active');
      dayViewBtn.classList.remove('active');
      
      if (view === 'month') {
        monthViewBtn.classList.add('active');
      } else if (view === 'week') {
        weekViewBtn.classList.add('active');
      } else {
        dayViewBtn.classList.add('active');
      }
      
      // Reload appointments for the new view if requested
      if (reloadData) {
        loadAppointments();
      }
    }
    
    // Navigation functions
    function goToPrevious() {
      if (currentView === 'month') {
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
      } else if (currentView === 'week') {
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() - 7);
      } else { // day view
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() - 1);
      }
      
      loadAppointments();
    }
    
    function goToNext() {
      if (currentView === 'month') {
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
      } else if (currentView === 'week') {
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() + 7);
      } else { // day view
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      loadAppointments();
    }
    
    function goToToday() {
      currentDate = new Date();
      loadAppointments();
    }
    
    // Render calendar based on current view
    function renderCalendar() {
      if (currentView === 'month') {
        renderMonthView();
      } else if (currentView === 'week') {
        renderWeekView();
      } else { // day view
        renderDayView();
      }
    }
    
    // Render month view
    function renderMonthView() {
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth();
      const today = new Date();
      
      // Set calendar title
      calendarTitle.textContent = new Date(year, month, 1).toLocaleDateString(undefined, { month: 'long', year: 'numeric' });
      
      // Get first day of the month
      const firstDay = new Date(year, month, 1);
      // Get last day of the month
      const lastDay = new Date(year, month + 1, 0);
      
      // Get the day of the week the first day falls on (0-6)
      const firstDayOfWeek = firstDay.getDay();
      
      // Calculate total days to display (including days from previous and next months)
      const daysInMonth = lastDay.getDate();
      const totalDays = Math.ceil((daysInMonth + firstDayOfWeek) / 7) * 7;
      
      // Generate calendar grid
      let html = '';
      let dayCount = 1 - firstDayOfWeek;
      
      for (let i = 0; i < totalDays / 7; i++) {
        html += '<tr>';
        
        for (let j = 0; j < 7; j++) {
          const currentDay = new Date(year, month, dayCount);
          const isCurrentMonth = currentDay.getMonth() === month;
          const isToday = isCurrentMonth && currentDay.getDate() === today.getDate() && 
                          currentDay.getMonth() === today.getMonth() && 
                          currentDay.getFullYear() === today.getFullYear();
          
          // Classes for the day cell
          const dayClasses = [
            'calendar-day',
            isCurrentMonth ? '' : 'other-month',
            isToday ? 'today' : ''
          ].filter(Boolean).join(' ');
          
          html += `<td class="${dayClasses}">`;
          
          // Day header
          html += `<div class="calendar-day-header">${currentDay.getDate()}</div>`;
          
          // Find appointments for this day
          const dayAppointments = appointments.filter(appointment => {
            const appointmentDate = new Date(appointment.appointment_date);
            return appointmentDate.getDate() === currentDay.getDate() && 
                  appointmentDate.getMonth() === currentDay.getMonth() && 
                  appointmentDate.getFullYear() === currentDay.getFullYear();
          });
          
          // Add appointments
          dayAppointments.slice(0, 3).forEach(appointment => {
            const appointmentDate = new Date(appointment.appointment_date);
            const timeStr = appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const colorClass = getAppointmentColorClass(appointment.appointment_type);
            
            html += `
              <div class="appointment-item bg-${colorClass}" 
                  data-id="${appointment.id}" 
                  title="${appointment.title} - ${timeStr}">
                <span class="appointment-dot bg-${colorClass}"></span>
                ${timeStr} ${appointment.title}
              </div>
            `;
          });
          
          // Show indicator if there are more appointments
          if (dayAppointments.length > 3) {
            html += `<div class="text-center"><small>+${dayAppointments.length - 3} more</small></div>`;
          }
          
          html += '</td>';
          dayCount++;
        }
        
        html += '</tr>';
      }
      
      monthViewBody.innerHTML = html;
      
      // Add event listeners to appointment items
      document.querySelectorAll('.appointment-item').forEach(item => {
        item.addEventListener('click', function() {
          const appointmentId = this.getAttribute('data-id');
          showAppointmentDetails(appointmentId);
        });
      });
    }
    
    // Render week view
    function renderWeekView() {
      const startDate = getFirstDayOfWeek(currentDate);
      const weekDates = [];
      
      // Generate dates for the week
      for (let i = 0; i < 7; i++) {
        const date = new Date(startDate);
        date.setDate(date.getDate() + i);
        weekDates.push(date);
      }
      
      // Set calendar title
      const startFormatted = startDate.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
      const endFormatted = weekDates[6].toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
      calendarTitle.textContent = `${startFormatted} - ${endFormatted}`;
      
      // Generate header row
      let headerHtml = '';
      for (let i = 0; i < 7; i++) {
        const date = weekDates[i];
        const isToday = isSameDay(date, new Date());
        const dayName = date.toLocaleDateString(undefined, { weekday: 'short' });
        const dayNum = date.getDate();
        
        headerHtml += `
          <th class="${isToday ? 'table-warning' : ''}">
            ${dayName} ${dayNum}
          </th>
        `;
      }
      weekViewHeader.innerHTML = headerHtml;
      
      // Generate body columns
      let bodyHtml = '';
      for (let i = 0; i < 7; i++) {
        const date = weekDates[i];
        const isToday = isSameDay(date, new Date());
        
        bodyHtml += `
          <td class="week-day-col ${isToday ? 'table-warning' : ''}">
            <div style="position: relative; height: 100%;">
        `;
        
        // Find appointments for this day
        const dayAppointments = appointments.filter(appointment => {
          const appointmentDate = new Date(appointment.appointment_date);
          return isSameDay(appointmentDate, date);
        });
        
        // Add appointments
        dayAppointments.forEach(appointment => {
          const appointmentDate = new Date(appointment.appointment_date);
          const hours = appointmentDate.getHours();
          const minutes = appointmentDate.getMinutes();
          
          // Calculate position (8am-8pm visible range)
          const topPercentage = (hours * 60 + minutes - 8 * 60) / (12 * 60) * 100;
          const duration = appointment.duration || 60; // Default 1 hour if not specified
          const heightPercentage = (duration / (12 * 60)) * 100;
          
          if (topPercentage >= 0 && topPercentage <= 100) {
            const colorClass = getAppointmentColorClass(appointment.appointment_type);
            
            bodyHtml += `
              <div class="day-appointment bg-${colorClass}" 
                  style="top: ${topPercentage}%; height: ${heightPercentage}%;"
                  data-id="${appointment.id}" 
                  title="${appointment.title}">
                ${appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${appointment.title}
              </div>
            `;
          }
        });
        
        bodyHtml += `
            </div>
          </td>
        `;
      }
      weekViewBody.innerHTML = bodyHtml;
      
      // Add event listeners to appointments
      document.querySelectorAll('.day-appointment').forEach(item => {
        item.addEventListener('click', function() {
          const appointmentId = this.getAttribute('data-id');
          showAppointmentDetails(appointmentId);
        });
      });
    }
    
    // Render day view
    function renderDayView() {
      const date = new Date(currentDate);
      const isToday = isSameDay(date, new Date());
      
      // Set calendar title
      calendarTitle.textContent = date.toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
      
      // Set header
      dayViewHeader.textContent = date.toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
      dayViewHeader.className = isToday ? 'table-warning' : '';
      
      // Generate time slots (8am-8pm)
      let bodyHtml = '';
      for (let hour = 8; hour <= 20; hour++) {
        const ampm = hour >= 12 ? 'PM' : 'AM';
        const hour12 = hour % 12 || 12;
        
        bodyHtml += `
          <tr>
            <td class="time-label">${hour12}:00 ${ampm}</td>
            <td class="time-slot" data-hour="${hour}">
              <div style="position: relative; height: 100%;">
        `;
        
        // Find appointments for this time slot
        const timeSlotAppointments = appointments.filter(appointment => {
          const appointmentDate = new Date(appointment.appointment_date);
          return isSameDay(appointmentDate, date) && appointmentDate.getHours() === hour;
        });
        
        // Add appointments
        timeSlotAppointments.forEach(appointment => {
          const appointmentDate = new Date(appointment.appointment_date);
          const minutes = appointmentDate.getMinutes();
          
          // Calculate position within hour
          const topPercentage = (minutes / 60) * 100;
          const duration = appointment.duration || 60; // Default 1 hour if not specified
          const heightPercentage = Math.min((duration / 60) * 100, 95); // Limit height to prevent overflow
          
          const colorClass = getAppointmentColorClass(appointment.appointment_type);
          
          bodyHtml += `
            <div class="day-appointment bg-${colorClass}" 
                style="top: ${topPercentage}%; height: ${heightPercentage}%;"
                data-id="${appointment.id}" 
                title="${appointment.title}">
              ${appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${appointment.title}
            </div>
          `;
        });
        
        bodyHtml += `
              </div>
            </td>
          </tr>
        `;
      }
      
      dayViewBody.innerHTML = bodyHtml;
      
      // Add event listeners to appointments
      document.querySelectorAll('.day-appointment').forEach(item => {
        item.addEventListener('click', function() {
          const appointmentId = this.getAttribute('data-id');
          showAppointmentDetails(appointmentId);
        });
      });
    }
    
    // Show appointment details in modal
    function showAppointmentDetails(appointmentId) {
      fetch(`/appointments/${appointmentId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const appointment = data.data;
          const appointmentDate = new Date(appointment.appointment_date);
          
          // Set modal content
          modalTitle.textContent = appointment.title;
          modalDate.textContent = appointmentDate.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
          modalTime.textContent = appointmentDate.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
          modalType.textContent = appointment.appointment_type || 'Not specified';
          modalLocation.textContent = appointment.location || 'Not specified';
          modalNotes.textContent = appointment.notes || 'No notes';
          
          // Set edit button link
          editAppointmentBtn.href = `/appointments/view/edit/${appointment.id}`;
          
          // Show modal
          appointmentModal.show();
        } else {
          console.error('Error loading appointment details:', data.message);
        }
      })
      .catch(error => {
        console.error('Error fetching appointment details:', error);
      });
    }
    
    // Delete appointment
    function deleteAppointment(appointmentId) {
      if (confirm('Are you sure you want to delete this appointment?')) {
        fetch(`/appointments/${appointmentId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Reload calendar and upcoming appointments
            loadAppointments();
          } else {
            alert(data.message);
          }
        })
        .catch(error => {
          console.error('Error deleting appointment:', error);
          alert('Error deleting appointment');
        });
      }
    }
    
    // Function to check if two dates are the same day
    function isSameDay(date1, date2) {
      return date1.getFullYear() === date2.getFullYear() &&
             date1.getMonth() === date2.getMonth() &&
             date1.getDate() === date2.getDate();
    }
    
    // Utility function to format date for API
    function formatDateForAPI(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Get appointment color class based on type
    function getAppointmentColorClass(type) {
      switch (type) {
        case 'meeting':
          return 'primary';
        case 'personal':
          return 'success';
        case 'medical':
          return 'danger';
        case 'reminder':
          return 'warning';
        default:
          return 'info';
      }
    }
    
    // Get first day of the week (Sunday) for a given date
    function getFirstDayOfWeek(date) {
      const day = date.getDay();
      const diff = date.getDate() - day;
      return new Date(date.setDate(diff));
    }
    
    // Initialize the calendar
    initCalendar();
  });
</script> 