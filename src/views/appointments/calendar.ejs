<%- include('../partials/header') %>

<% 
// Pass initial view parameter to client-side script
const initialView = typeof view !== 'undefined' ? view : 'month';
%>

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3">Appointment Calendar</h1>
    <a href="/appointments/create" class="btn btn-primary">Create New Appointment</a>
  </div>
  
  <div class="row">
    <!-- Calendar View Controls -->
    <div class="col-md-12 mb-4">
      <div class="card shadow">
        <div class="card-header py-3 d-flex flex-wrap justify-content-between align-items-center">
          <h6 class="m-0 fw-bold text-primary">Calendar</h6>
          <div class="d-flex">
            <div class="btn-group me-2">
              <button type="button" class="btn btn-outline-secondary" id="prevBtn">
                <i class="fas fa-chevron-left"></i>
              </button>
              <button type="button" class="btn btn-outline-secondary" id="todayBtn">Today</button>
              <button type="button" class="btn btn-outline-secondary" id="nextBtn">
                <i class="fas fa-chevron-right"></i>
              </button>
            </div>
            <div class="btn-group">
              <button type="button" class="btn btn-outline-secondary active" id="monthViewBtn">Month</button>
              <button type="button" class="btn btn-outline-secondary" id="weekViewBtn">Week</button>
              <button type="button" class="btn btn-outline-secondary" id="dayViewBtn">Day</button>
            </div>
          </div>
        </div>
        <div class="card-body">
          <h2 id="calendarTitle" class="h4 mb-4 text-center"></h2>
          
          <!-- Month View -->
          <div id="monthView" class="calendar-view">
            <div class="table-responsive">
              <table class="table table-bordered calendar-table">
                <thead>
                  <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                  </tr>
                </thead>
                <tbody id="monthViewBody">
                  <!-- Month calendar will be generated here -->
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Week View -->
          <div id="weekView" class="calendar-view" style="display: none;">
            <div class="table-responsive">
              <table class="table table-bordered calendar-table">
                <thead>
                  <tr id="weekViewHeader">
                    <!-- Week day headers will be generated here -->
                  </tr>
                </thead>
                <tbody>
                  <!-- Week calendar will be generated here -->
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Day View -->
          <div id="dayView" class="calendar-view" style="display: none;">
            <div class="table-responsive">
              <table class="table table-bordered calendar-table">
                <thead>
                  <tr>
                    <th id="dayViewHeader" colspan="2">
                      <!-- Day header will be generated here -->
                    </th>
                  </tr>
                  <tr>
                    <th style="width: 100px;">Time</th>
                    <th>Events</th>
                  </tr>
                </thead>
                <tbody id="dayViewBody">
                  <!-- Day calendar will be generated here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Upcoming Appointments -->
    <div class="col-md-12">
      <div class="card shadow mb-4">
        <div class="card-header py-3">
          <h6 class="m-0 fw-bold text-primary">Upcoming Appointments</h6>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-bordered table-hover" id="upcomingTable" width="100%" cellspacing="0">
              <thead>
                <tr>
                  <th>Title</th>
                  <th>Date</th>
                  <th>Time</th>
                  <th>Type</th>
                  <th>Location</th>
                  <th>Notes</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="upcomingList">
                <!-- Loading spinner -->
                <tr>
                  <td colspan="7" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Appointment Detail Modal -->
<div class="modal fade" id="appointmentModal" tabindex="-1" aria-labelledby="appointmentModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="appointmentModalLabel">Appointment Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <h4 id="modalTitle" class="mb-3"></h4>
        
        <div class="mb-3">
          <div class="d-flex">
            <div class="text-muted me-2"><i class="far fa-calendar"></i></div>
            <div id="modalDate"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex">
            <div class="text-muted me-2"><i class="far fa-clock"></i></div>
            <div id="modalTime"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex">
            <div class="text-muted me-2"><i class="fas fa-tag"></i></div>
            <div id="modalType"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex">
            <div class="text-muted me-2"><i class="fas fa-map-marker-alt"></i></div>
            <div id="modalLocation"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="text-muted mb-1">Notes:</div>
          <div id="modalNotes" class="p-2 border rounded"></div>
        </div>
      </div>
      <div class="modal-footer">
        <a id="editAppointmentBtn" href="#" class="btn btn-primary">Edit</a>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<style>
  .calendar-table {
    table-layout: fixed;
  }
  
  .calendar-day {
    height: 120px;
    position: relative;
    padding: 5px !important;
    vertical-align: top;
  }
  
  .calendar-day-header {
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .calendar-day.other-month {
    background-color: #f8f9fa;
    color: #adb5bd;
  }
  
  .calendar-day.today {
    background-color: #fff8e1;
  }
  
  .appointment-dot {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 5px;
  }
  
  .appointment-item {
    font-size: 0.8rem;
    padding: 2px 4px;
    margin-bottom: 2px;
    border-radius: 3px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    cursor: pointer;
  }
  
  .week-day-col {
    position: relative;
  }
  
  .time-slot {
    height: 30px;
    border-top: 1px solid #e9ecef;
    position: relative;
  }
  
  .time-label {
    text-align: right;
    padding-right: 10px;
    font-size: 0.8rem;
  }
  
  .day-appointment {
    position: absolute;
    left: 5px;
    right: 5px;
    overflow: hidden;
    padding: 2px 5px;
    font-size: 0.8rem;
    border-radius: 3px;
    z-index: 10;
    cursor: pointer;
  }
</style>

<%- include('../partials/footer') %>

<!-- Include the script with the view parameter -->
<script>
  // Pass the view parameter to be used in the calendar script
  window.initialCalendarView = '<%= initialView %>';
</script>

<script>
// Current date and view state
let currentDate = new Date();
let currentView = '<%= initialView %>';
let appointments = [];

// Fetch appointments based on current view
async function fetchAppointments() {
  try {
    console.log('Fetching appointments for view:', currentView);
    
    let url;
    if (currentView === 'day') {
      url = `/api/appointments?date=${currentDate.toISOString().split('T')[0]}`;
    } else if (currentView === 'week') {
      url = `/api/appointments?date=${currentDate.toISOString().split('T')[0]}&view=week`;
    } else { // month view
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth() + 1; // JavaScript months are 0-indexed
      url = `/api/appointments?year=${year}&month=${month}&view=month`;
    }
    
    console.log('Fetching appointments from URL:', url);
    
    const response = await axios.get(url);
    console.log('API response:', response.data);
    
    // Ensure appointments is always an array
    if (response.data.data && Array.isArray(response.data.data.appointments)) {
      // If the API returns data.appointments
      appointments = response.data.data.appointments;
    } else if (Array.isArray(response.data.data)) {
      // If the API returns data directly as an array
      appointments = response.data.data;
    } else {
      console.warn('Unexpected response format:', response.data);
      appointments = [];
    }
    
    console.log('Appointments loaded:', appointments.length, appointments);
    
    // Always render the calendar when we get new data
    renderCalendar();
  } catch (error) {
    console.error('Error fetching appointments:', error);
    console.error('Error details:', error.response?.data || 'No response data available');
    // Reset appointments to empty array on error
    appointments = [];
    showToast('error', 'Error fetching appointments: ' + error.message);
    // Still render calendar to show empty state
    renderCalendar();
  }
}

// Render calendar based on current view
function renderCalendar() {
  try {
    updateCalendarTitle();
    
    // Make sure appointments is always an array before any operations on it
    if (!Array.isArray(appointments)) {
      console.warn('Appointments is not an array, resetting to empty array');
      appointments = [];
    }
    
    switch (currentView) {
      case 'day':
        renderDayView();
        break;
      case 'week':
        renderWeekView();
        break;
      case 'month':
      default:
        renderMonthView();
        break;
    }
  } catch (error) {
    console.error('Error rendering calendar:', error);
    showToast('error', 'Error rendering calendar: ' + error.message);
  }
}

// Render month view
function renderMonthView() {
  const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
  const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
  const startingDay = firstDay.getDay();
  const monthLength = lastDay.getDate();
  
  let html = '';
  let day = 1;
  
  // Create weeks
  for (let i = 0; i < 6; i++) {
    html += '<tr>';
    
    // Create days
    for (let j = 0; j < 7; j++) {
      if (i === 0 && j < startingDay) {
        // Empty cells before first day
        html += '<td class="text-muted"></td>';
      } else if (day > monthLength) {
        // Empty cells after last day
        html += '<td class="text-muted"></td>';
      } else {
        // Regular day cell
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        const isToday = isSameDay(date, new Date());
        // Make sure appointments is an array before filtering
        const dayAppointments = Array.isArray(appointments) ? appointments.filter(apt => {
          // Handle both date field formats
          const dateField = apt.appointment_date || apt.start_time;
          if (!dateField) return false;
          
          const aptDate = new Date(dateField);
          return isSameDay(aptDate, date);
        }) : [];
        
        html += `
          <td class="position-relative ${isToday ? 'bg-light' : ''}">
            <div class="d-flex justify-content-between align-items-start p-1">
              <span class="fw-bold">${day}</span>
              ${dayAppointments.length > 0 ? `<span class="badge bg-primary">${dayAppointments.length}</span>` : ''}
            </div>
            <div class="appointment-list">
              ${dayAppointments.map(apt => {
                // Handle both date field formats
                const dateField = apt.appointment_date || apt.start_time;
                if (!dateField) return '';
                
                return `
                  <div class="appointment-item p-1 mb-1 rounded bg-light" 
                       onclick="showAppointmentDetails('${apt.id}')">
                    <small class="d-block text-truncate">${apt.title}</small>
                    <small class="text-muted">${formatTime(new Date(dateField))}</small>
                  </div>
                `;
              }).join('')}
            </div>
          </td>
        `;
        day++;
      }
    }
    html += '</tr>';
    if (day > monthLength) break;
  }
  
  const monthViewBody = document.getElementById('monthViewBody');
  if (!monthViewBody) {
    console.warn('monthViewBody element not found');
    return;
  }
  
  monthViewBody.innerHTML = html;
}

// Update calendar title based on current view and date
function updateCalendarTitle() {
  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  const titleEl = document.getElementById('calendarTitle');
  
  if (!titleEl) {
    console.warn('calendarTitle element not found');
    return;
  }
  
  switch (currentView) {
    case 'day':
      titleEl.textContent = `${months[currentDate.getMonth()]} ${currentDate.getDate()}, ${currentDate.getFullYear()}`;
      break;
    case 'week':
      const weekStart = new Date(currentDate);
      weekStart.setDate(currentDate.getDate() - currentDate.getDay());
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      
      if (weekStart.getMonth() === weekEnd.getMonth()) {
        titleEl.textContent = `${months[weekStart.getMonth()]} ${weekStart.getDate()}-${weekEnd.getDate()}, ${weekStart.getFullYear()}`;
      } else if (weekStart.getFullYear() === weekEnd.getFullYear()) {
        titleEl.textContent = `${months[weekStart.getMonth()]} ${weekStart.getDate()} - ${months[weekEnd.getMonth()]} ${weekEnd.getDate()}, ${weekStart.getFullYear()}`;
      } else {
        titleEl.textContent = `${months[weekStart.getMonth()]} ${weekStart.getDate()}, ${weekStart.getFullYear()} - ${months[weekEnd.getMonth()]} ${weekEnd.getDate()}, ${weekEnd.getFullYear()}`;
      }
      break;
    case 'month':
    default:
      titleEl.textContent = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
      break;
  }
}

// Render week view
function renderWeekView() {
  try {
    // Get the start of the week (Sunday)
    const weekStart = new Date(currentDate);
    weekStart.setDate(currentDate.getDate() - currentDate.getDay());
    weekStart.setHours(0, 0, 0, 0);
    
    // Generate week days header
    let headerHtml = '<th style="width: 50px;">Time</th>';
    for (let i = 0; i < 7; i++) {
      const date = new Date(weekStart);
      date.setDate(weekStart.getDate() + i);
      const isToday = isSameDay(date, new Date());
      headerHtml += `
        <th class="${isToday ? 'bg-light' : ''}">
          <div class="text-center">
            <div class="fw-bold">${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i]}</div>
            <div>${date.getDate()}</div>
          </div>
        </th>
      `;
    }
    
    const weekViewHeader = document.getElementById('weekViewHeader');
    if (weekViewHeader) {
      weekViewHeader.innerHTML = headerHtml;
    } else {
      console.warn('weekViewHeader element not found');
      return;
    }
    
    // Generate time slots - each row represents an hour
    let bodyHtml = '';
    for (let hour = 0; hour < 24; hour++) {
      bodyHtml += '<tr>';
      
      // Time column
      bodyHtml += `
        <td class="text-end pe-2">
          ${hour === 0 ? '12 AM' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour - 12} PM`}
        </td>
      `;
      
      // Day columns
      for (let day = 0; day < 7; day++) {
        const date = new Date(weekStart);
        date.setDate(weekStart.getDate() + day);
        date.setHours(hour);
        
        const isToday = isSameDay(date, new Date());
        // Make sure appointments is an array before filtering
        const hourAppointments = Array.isArray(appointments) ? appointments.filter(apt => {
          // Handle both date field formats
          const dateField = apt.appointment_date || apt.start_time;
          if (!dateField) return false;
          
          const aptDate = new Date(dateField);
          return isSameDay(aptDate, date) && aptDate.getHours() === hour;
        }) : [];
        
        bodyHtml += `
          <td class="position-relative ${isToday ? 'bg-light' : ''}" style="height: 40px;">
            ${hourAppointments.map(apt => {
              // Handle both date field formats
              const dateField = apt.appointment_date || apt.start_time;
              if (!dateField) return '';
              
              return `
                <div class="appointment-item p-1 mb-1 rounded bg-light" 
                     onclick="showAppointmentDetails('${apt.id}')">
                  <small class="d-block text-truncate">${apt.title}</small>
                  <small class="text-muted">${formatTime(new Date(dateField))}</small>
                </div>
              `;
            }).join('')}
          </td>
        `;
      }
      
      bodyHtml += '</tr>';
    }
    
    // Replace the entire tbody content instead of just weekViewBody
    const weekViewTable = document.getElementById('weekView');
    if (weekViewTable) {
      const tbody = weekViewTable.querySelector('tbody');
      if (tbody) {
        tbody.innerHTML = bodyHtml;
      } else {
        console.warn('tbody element not found in weekView');
      }
    } else {
      console.warn('weekView element not found');
    }
  } catch (error) {
    console.error('Error rendering week view:', error);
    showToast('error', 'Error rendering week view: ' + error.message);
  }
}

// Render day view
function renderDayView() {
  try {
    const date = new Date(currentDate);
    const isToday = isSameDay(date, new Date());
    
    // Set header
    const dayViewHeader = document.getElementById('dayViewHeader');
    if (!dayViewHeader) {
      console.warn('dayViewHeader element not found');
      return;
    }
    
    dayViewHeader.textContent = date.toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
    dayViewHeader.className = isToday ? 'table-warning' : '';
    
    // Generate time slots (8am-8pm)
    let bodyHtml = '';
    for (let hour = 8; hour <= 20; hour++) {
      const ampm = hour >= 12 ? 'PM' : 'AM';
      const hour12 = hour % 12 || 12;
      
      bodyHtml += `
        <tr>
          <td class="time-label">${hour12}:00 ${ampm}</td>
          <td class="time-slot" data-hour="${hour}">
            <div style="position: relative; height: 100%;">
      `;
      
      // Find appointments for this time slot
      const timeSlotAppointments = Array.isArray(appointments) ? appointments.filter(appointment => {
        // Support both appointment_date and start_time fields
        const dateField = appointment.appointment_date || appointment.start_time;
        if (!dateField) return false;
        
        const appointmentDate = new Date(dateField);
        return isSameDay(appointmentDate, date) && appointmentDate.getHours() === hour;
      }) : [];
      
      // Add appointments
      timeSlotAppointments.forEach(appointment => {
        const appointmentDate = new Date(appointment.appointment_date || appointment.start_time);
        const minutes = appointmentDate.getMinutes();
        
        // Calculate position within hour
        const topPercentage = (minutes / 60) * 100;
        const duration = appointment.duration || 60; // Default 1 hour if not specified
        const heightPercentage = Math.min((duration / 60) * 100, 95); // Limit height to prevent overflow
        
        const colorClass = getAppointmentColorClass(appointment.appointment_type);
        
        bodyHtml += `
          <div class="day-appointment bg-${colorClass}" 
              style="top: ${topPercentage}%; height: ${heightPercentage}%;"
              data-id="${appointment.id}" 
              title="${appointment.title}">
            ${appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${appointment.title}
          </div>
        `;
      });
      
      bodyHtml += `
            </div>
          </td>
        </tr>
      `;
    }
    
    const dayViewBody = document.getElementById('dayViewBody');
    if (!dayViewBody) {
      console.warn('dayViewBody element not found');
      return;
    }
    
    dayViewBody.innerHTML = bodyHtml;
    
    // Add event listeners to appointments
    document.querySelectorAll('.day-appointment').forEach(item => {
      item.addEventListener('click', function() {
        const appointmentId = this.getAttribute('data-id');
        showAppointmentDetails(appointmentId);
      });
    });
  } catch (error) {
    console.error('Error rendering day view:', error);
    showToast('error', 'Error rendering day view: ' + error.message);
  }
}

// Helper function to get appointment color class based on type
function getAppointmentColorClass(type) {
  switch (type) {
    case 'meeting':
      return 'primary';
    case 'personal':
      return 'success';
    case 'medical':
      return 'danger';
    case 'reminder':
      return 'warning';
    default:
      return 'info';
  }
}

// Navigate calendar
function navigateCalendar(direction) {
  switch (currentView) {
    case 'day':
      currentDate.setDate(currentDate.getDate() + (direction === 'prev' ? -1 : 1));
      break;
    case 'week':
      currentDate.setDate(currentDate.getDate() + (direction === 'prev' ? -7 : 7));
      break;
    case 'month':
      currentDate.setMonth(currentDate.getMonth() + (direction === 'prev' ? -1 : 1));
      break;
  }
  fetchAppointments();
}

// Change calendar view
function changeView(view) {
  currentView = view;
  
  // Update active button state
  document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
  const viewBtn = document.getElementById(`${view}ViewBtn`);
  if (viewBtn) {
    viewBtn.classList.add('active');
  } else {
    console.warn(`${view}ViewBtn element not found`);
  }
  
  // Hide all views 
  document.querySelectorAll('.calendar-view').forEach(el => el.style.display = 'none');
  
  // Show selected view
  const viewElement = document.getElementById(`${view}View`);
  if (viewElement) {
    viewElement.style.display = 'block';
  } else {
    console.warn(`${view}View element not found`);
  }
  
  fetchAppointments();
}

// Helper functions
function isSameDay(date1, date2) {
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
}

function formatTime(date) {
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Immediately initialize view on page load
(function initializeCalendarView() {
  // Get view from URL parameter if available
  const urlParams = new URLSearchParams(window.location.search);
  const viewParam = urlParams.get('view');
  
  // Set view from URL parameter, window.initialCalendarView, or default to 'month'
  if (viewParam && ['day', 'week', 'month'].includes(viewParam)) {
    currentView = viewParam;
  } else if (window.initialCalendarView && ['day', 'week', 'month'].includes(window.initialCalendarView)) {
    currentView = window.initialCalendarView;
  } else {
    currentView = 'month';
  }
  
  console.log('Initializing calendar with view:', currentView);
  
  // Set active button state
  document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
  const viewBtn = document.getElementById(`${currentView}ViewBtn`);
  if (viewBtn) {
    viewBtn.classList.add('active');
  }
  
  // Hide all views
  document.querySelectorAll('.calendar-view').forEach(el => el.style.display = 'none');
  
  // Show selected view
  const viewElement = document.getElementById(`${currentView}View`);
  if (viewElement) {
    viewElement.style.display = 'block';
  }
})();

// Show toast message
function showToast(type, message) {
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : 'success'} border-0 position-fixed bottom-0 end-0 m-3`;
  toast.setAttribute('role', 'alert');
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');
  
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">${message}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;
  
  document.body.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast);
  bsToast.show();
  
  toast.addEventListener('hidden.bs.toast', () => {
    toast.remove();
  });
}

// Show appointment details in modal
function showAppointmentDetails(appointmentId) {
  try {
    console.log('Fetching appointment details for ID:', appointmentId);
    
    // Get the appointment modal
    const appointmentModal = new bootstrap.Modal(document.getElementById('appointmentModal'));
    
    // Fetch appointment details
    axios.get(`/api/appointments/${appointmentId}`)
      .then(response => {
        if (response.data.success) {
          const appointment = response.data.data;
          console.log('Appointment details:', appointment);
          
          // Set modal content
          document.getElementById('modalTitle').textContent = appointment.title;
          
          const appointmentDate = new Date(appointment.start_time);
          document.getElementById('modalDate').textContent = appointmentDate.toLocaleDateString(undefined, { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          });
          
          const endTime = new Date(appointment.end_time);
          document.getElementById('modalTime').textContent = `${formatTime(appointmentDate)} - ${formatTime(endTime)}`;
          
          document.getElementById('modalType').textContent = appointment.appointment_type || 'Not specified';
          document.getElementById('modalLocation').textContent = appointment.location || 'Not specified';
          document.getElementById('modalNotes').textContent = appointment.description || 'No notes';
          
          // Set edit button link
          document.getElementById('editAppointmentBtn').href = `/appointments/edit/${appointment.id}`;
          
          // Show modal
          appointmentModal.show();
        } else {
          showToast('error', response.data.message || 'Failed to load appointment details');
        }
      })
      .catch(error => {
        console.error('Error fetching appointment details:', error);
        showToast('error', 'Error loading appointment details');
      });
  } catch (error) {
    console.error('Error in showAppointmentDetails:', error);
    showToast('error', 'Error showing appointment details');
  }
}

// Load upcoming appointments list
function loadUpcomingAppointments() {
  try {
    const upcomingList = document.getElementById('upcomingList');
    if (!upcomingList) {
      console.warn('upcomingList element not found');
      return;
    }
    
    console.log('Loading upcoming appointments');
    
    axios.get('/api/appointments/upcoming')
      .then(response => {
        if (response.data.success && Array.isArray(response.data.data)) {
          const upcomingAppointments = response.data.data;
          console.log('Upcoming appointments loaded:', upcomingAppointments.length);
          
          if (upcomingAppointments.length === 0) {
            upcomingList.innerHTML = `
              <tr>
                <td colspan="7" class="text-center py-4">
                  <div class="text-muted">
                    <i class="far fa-calendar-times fs-4 mb-3 d-block"></i>
                    <p class="mb-0">No upcoming appointments found.</p>
                    <p class="mb-0">
                      <a href="/appointments/create" class="btn btn-sm btn-primary mt-2">
                        <i class="fas fa-plus me-1"></i> Create Appointment
                      </a>
                    </p>
                  </div>
                </td>
              </tr>
            `;
          } else {
            upcomingList.innerHTML = upcomingAppointments.map(appointment => {
              const startDate = new Date(appointment.start_time);
              const endDate = new Date(appointment.end_time);
              
              return `
                <tr>
                  <td>${appointment.title}</td>
                  <td>${startDate.toLocaleDateString()}</td>
                  <td>${formatTime(startDate)} - ${formatTime(endDate)}</td>
                  <td>${appointment.appointment_type || 'Not specified'}</td>
                  <td>${appointment.location || 'Not specified'}</td>
                  <td>${appointment.description ? appointment.description.substring(0, 50) + (appointment.description.length > 50 ? '...' : '') : 'No description'}</td>
                  <td>
                    <div class="d-flex gap-1">
                      <button class="btn btn-sm btn-outline-primary" onclick="showAppointmentDetails('${appointment.id}')">
                        <i class="fas fa-eye"></i>
                      </button>
                      <a href="/appointments/edit/${appointment.id}" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-edit"></i>
                      </a>
                    </div>
                  </td>
                </tr>
              `;
            }).join('');
          }
        } else {
          upcomingList.innerHTML = `
            <tr>
              <td colspan="7" class="text-center py-3">
                <div class="alert alert-warning mb-0">
                  Failed to load upcoming appointments
                </div>
              </td>
            </tr>
          `;
        }
      })
      .catch(error => {
        console.error('Error loading upcoming appointments:', error);
        
        upcomingList.innerHTML = `
          <tr>
            <td colspan="7" class="text-center py-3">
              <div class="alert alert-danger mb-0">
                Error loading upcoming appointments: ${error.message}
              </div>
            </td>
          </tr>
        `;
      });
  } catch (error) {
    console.error('Error in loadUpcomingAppointments:', error);
  }
}

// Initialize event listeners when the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  // Initialize appointments as empty array
  appointments = [];
  
  // Load data
  fetchAppointments();
  loadUpcomingAppointments();
  
  // Set up event listeners for navigation buttons
  const prevBtn = document.getElementById('prevBtn');
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      navigateCalendar('prev');
    });
  }
  
  const nextBtn = document.getElementById('nextBtn');
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      navigateCalendar('next');
    });
  }
  
  const todayBtn = document.getElementById('todayBtn');
  if (todayBtn) {
    todayBtn.addEventListener('click', () => {
      currentDate = new Date();
      fetchAppointments();
      renderCalendar();
    });
  }
  
  // Set up event listeners for view buttons
  const monthViewBtn = document.getElementById('monthViewBtn');
  if (monthViewBtn) {
    monthViewBtn.addEventListener('click', () => {
      changeView('month');
    });
  }
  
  const weekViewBtn = document.getElementById('weekViewBtn');
  if (weekViewBtn) {
    weekViewBtn.addEventListener('click', () => {
      changeView('week');
    });
  }
  
  const dayViewBtn = document.getElementById('dayViewBtn');
  if (dayViewBtn) {
    dayViewBtn.addEventListener('click', () => {
      changeView('day');
    });
  }
});
</script>

<style>
.appointment-list {
  max-height: 80px;
  overflow-y: auto;
}

.appointment-item {
  cursor: pointer;
  transition: background-color 0.2s;
}

.appointment-item:hover {
  background-color: #e9ecef !important;
}

.calendar-table td {
  height: 120px;
  width: 14.28%;
  padding: 0 !important;
}

.week-view th {
  min-width: 120px;
  padding: 10px !important;
}

.week-view td {
  padding: 5px !important;
  border: 1px solid #dee2e6;
}

.time-column {
  width: 80px;
  text-align: right;
  padding-right: 10px !important;
  font-size: 0.9em;
  color: #6c757d;
}

/* Week view specific styles */
#weekView .calendar-table {
  table-layout: fixed;
}

#weekView .calendar-table td {
  height: 40px;
  position: relative;
  padding: 2px !important;
}

#weekView .calendar-table th {
  text-align: center;
  padding: 8px !important;
}

.day-appointment {
  position: absolute;
  left: 5px;
  right: 5px;
  overflow: hidden;
  padding: 2px 5px;
  font-size: 0.8rem;
  border-radius: 3px;
  z-index: 10;
  cursor: pointer;
}
</style> 