<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= typeof title !== 'undefined' ? title : 'Planner Buddy' %></title>
  
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/style.css">
  <!-- Axios -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  
  <!-- Custom CSS with theme color -->
  <% const primaryColor = typeof themeColor !== 'undefined' ? themeColor : '#72d1a8'; %>
  <style>
    :root {
      --primary-color: <%= primaryColor %>;
    }
    
    body {
      padding-top: 56px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      font-family: 'Roboto', sans-serif;
    }
    
    h1, h2, h3, h4, h5, h6, .navbar-brand {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .lead {
      font-weight: 300;
      font-size: 1.15rem;
      line-height: 1.7;
    }
    
    .display-4 {
      font-weight: 700;
      letter-spacing: -0.02em;
    }
    
    .navbar-brand {
      font-weight: bold;
      letter-spacing: -0.5px;
    }
    
    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .btn-primary:hover, .btn-primary:focus {
      background-color: var(--primary-color);
      filter: brightness(0.9);
      border-color: var(--primary-color);
    }
    
    .btn-outline-primary {
      color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .btn-outline-primary:hover, .btn-outline-primary:focus {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      color: white;
    }
    
    .bg-primary {
      background-color: var(--primary-color) !important;
    }
    
    .text-primary {
      color: var(--primary-color) !important;
    }
    
    .navbar {
      background-color: var(--primary-color);
      padding-left: 0;
      padding-right: 0;
    }
    
    .navbar .container {
      padding-left: 1rem;
      padding-right: 1rem;
      max-width: 100%;
    }
    
    .navbar-dark .navbar-nav .nav-link {
      color: rgba(255, 255, 255, 0.85);
      font-weight: 500;
      letter-spacing: 0.3px;
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .navbar-dark .navbar-nav .nav-link:hover {
      color: rgba(255, 255, 255, 1);
    }
    
    .content {
      flex: 1;
      display: flex;
      padding: 20px;
    }
    
    .sidebar {
      width: 250px;
      background-color: #f8f9fa;
      padding: 20px;
      border-right: 1px solid #e9ecef;
    }
    
    .main-content {
      flex: 1;
      padding: 20px;
    }
    
    @media (max-width: 768px) {
      .content {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        border-right: none;
        border-bottom: 1px solid #e9ecef;
      }
    }
    
    /* Table styles */
    .table th {
      background-color: #f8f9fa;
    }
    
    .table td {
      white-space: normal;
      word-wrap: break-word;
    }
    
    /* Landing page styles */
    .landing-hero {
      padding: 80px 0;
      background-color: #f8f9fa;
    }
    
    .landing-content {
      background: #f9f9f9;
      flex: 1;
    }
    
    /* Card hover effects */
    .feature-card {
      transition: all 0.3s ease;
      border: none;
    }
    
    .feature-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
    }
    
    .feature-card .card-body {
      padding: 2rem;
    }
    
    .feature-card .feature-icon {
      transition: all 0.3s ease;
      margin-bottom: 1.5rem;
    }
    
    .feature-card:hover .feature-icon {
      transform: scale(1.2);
    }
    
    .feature-card h4 {
      font-weight: 600;
      margin-bottom: 1rem;
    }
    
    .feature-card p {
      color: #6c757d;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    
    .quick-filters .nav-link {
      padding: 0.75rem 0.75rem;
      color: #495057;
      border-radius: 0.5rem;
      margin: 0.25rem 0;
      transition: all 0.3s ease;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="/">Planner Buddy</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item user-menu d-none">
            <a class="nav-link" href="/todos/all"><i class="fas fa-tasks"></i> Todos</a>
          </li>
          <li class="nav-item user-menu d-none">
            <a class="nav-link" href="/appointments/calendar"><i class="far fa-calendar-alt"></i> Calendar</a>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item admin-menu d-none">
            <a class="nav-link" href="/settings/view/admin"><i class="fas fa-cog"></i> Settings</a>
          </li>
          <li class="nav-item dropdown user-dropdown d-none">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-user"></i> <span id="headerUsername"></span>
            </a>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
              <li><a class="dropdown-item" href="/auth/profile"><i class="fas fa-id-card"></i> Profile</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="#" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
          </li>
          <li class="nav-item guest-menu">
            <a class="nav-link" href="/auth/login"><i class="fas fa-sign-in-alt"></i> Login</a>
          </li>
          <li class="nav-item guest-menu">
            <a class="nav-link" href="/auth/register"><i class="fas fa-user-plus"></i> Register</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  
  <!-- Content wrapper -->
  <% if (typeof user !== 'undefined' && user) { %>
  <!-- User is logged in - show sidebar layout -->
  <div class="content">
    <div class="sidebar user-menu d-md-block">
      <div class="d-grid gap-2">
        <a href="/todos/create" class="btn btn-primary mb-3">Create Todo</a>
        <a href="/appointments/create" class="btn btn-primary mb-3">Create Appointment</a>
      </div>
      <hr>
      <h6 class="sidebar-heading d-flex align-items-center mt-4 mb-3 text-muted">
        <i class="fas fa-filter me-2"></i> Quick Filters
      </h6>
      <ul class="nav flex-column quick-filters">
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center" href="/todos/all?status=pending">
            <span class="filter-icon">
              <i class="far fa-clock"></i>
            </span>
            <span class="filter-text">Pending Todos</span>
            <span class="filter-count badge rounded-pill bg-primary">0</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center" href="/todos/all?status=completed">
            <span class="filter-icon">
              <i class="fas fa-check"></i>
            </span>
            <span class="filter-text">Completed Todos</span>
            <span class="filter-count badge rounded-pill bg-success">0</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center" href="/todos/all?priority=high">
            <span class="filter-icon">
              <i class="fas fa-exclamation-circle text-danger"></i>
            </span>
            <span class="filter-text">High Priority</span>
            <span class="filter-count badge rounded-pill bg-danger">0</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center" href="/appointments/calendar?view=day">
            <span class="filter-icon">
              <i class="fas fa-calendar-day text-info"></i>
            </span>
            <span class="filter-text">Today's Schedule</span>
            <span class="filter-count badge rounded-pill bg-info">0</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center" href="/appointments/calendar?view=week">
            <span class="filter-icon">
              <i class="fas fa-calendar-week text-primary"></i>
            </span>
            <span class="filter-text">This Week</span>
            <span class="filter-count badge rounded-pill bg-primary">0</span>
          </a>
        </li>
      </ul>
      <style>
        .quick-filters .nav-link {
          padding: 0.75rem 0.75rem;
          color: #495057;
          border-radius: 0.5rem;
          margin: 0.25rem 0;
          transition: all 0.3s ease;
        }
        
        .quick-filters .nav-link:hover {
          background-color: rgba(var(--bs-primary-rgb), 0.1);
          color: var(--bs-primary);
          transform: translateX(5px);
        }
        
        .quick-filters .filter-icon {
          width: 24px;
          height: 24px;
          display: flex;
          align-items: center;
          justify-content: center;
          margin-right: 10px;
          font-size: 1rem;
        }
        
        .quick-filters .filter-text {
          font-size: 0.9rem;
          font-weight: 500;
        }
        
        .quick-filters .filter-count {
          font-size: 0.75rem;
          font-weight: 600;
          margin-left: auto;
          margin-right: 0;
        }
        
        .sidebar-heading {
          font-size: 0.85rem;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          font-weight: 600;
          margin-left: 0.25rem;
        }
      </style>
    </div>
    
    <!-- Main content -->
    <div class="main-content">
  <% } else { %>
  <!-- User is not logged in - show full width layout -->
  <div class="landing-content">
  <% } %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Cấu hình để tự động gửi token trong mọi request
    setupTokenHeader();
    
    // Xử lý nút logout
    setupLogoutButton();
    
    // Không tự động redirect, chỉ cập nhật UI dựa trên token nếu cần
    if (typeof user === 'undefined' || !user) {
      console.log('[header.js] No server-side user, updating UI from token');
      updateUIFromToken();
    } else {
      console.log('[header.js] Server-side user detected:', user.username);
    }
  });
  
  // Cấu hình để tự động gửi token trong header của mọi request
  function setupTokenHeader() {
    const token = localStorage.getItem('token');
    if (!token) return;
    
    console.log('[header.js] Setting up token interceptors with token:', token.substring(0, 20) + '...');
    
    // Fetch API
    const originalFetch = window.fetch;
    window.fetch = function(url, options = {}) {
      // Clone options để tránh tham chiếu
      options = JSON.parse(JSON.stringify(options || {}));
      options.headers = options.headers || {};
      options.headers['Authorization'] = `Bearer ${token}`;
      
      return originalFetch(url, options).then(response => {
        if (response.status === 401) {
          console.log('[header.js] Received 401 response');
          return response;
        }
        return response;
      });
    };
    
    // Axios nếu được sử dụng
    if (typeof axios !== 'undefined') {
      axios.interceptors.request.use(function(config) {
        config.headers = config.headers || {};
        config.headers.Authorization = `Bearer ${token}`;
        return config;
      });
      
      axios.interceptors.response.use(
        response => response,
        error => {
          if (error.response && error.response.status === 401) {
            console.log('[header.js] Received 401 response from Axios request');
            return Promise.reject(error);
          }
          return Promise.reject(error);
        }
      );
    }
  }
  
  // Xử lý nút logout
  function setupLogoutButton() {
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('[header.js] Logging out...');
        localStorage.removeItem('token');
        window.location.href = '/auth/login';
      });
    }
  }
  
  // Cập nhật giao diện dựa trên token
  function updateUIFromToken() {
    const token = localStorage.getItem('token');
    if (!token) {
      console.log('[header.js] No token found');
      return;
    }
    
    try {
      // Parse token
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.log('[header.js] Invalid token format');
        localStorage.removeItem('token');
        return;
      }
      
      const payload = JSON.parse(atob(parts[1]));
      const exp = payload.exp * 1000;
      
      if (Date.now() >= exp) {
        console.log('[header.js] Token expired');
        localStorage.removeItem('token');
        return;
      }
      
      console.log('[header.js] Valid token found, updating UI for user:', payload.username);
      
      // Cập nhật tên người dùng
      const usernameElem = document.getElementById('headerUsername');
      if (usernameElem) {
        usernameElem.textContent = payload.username;
      }
      
      // Hiển thị menu người dùng
      document.querySelectorAll('.user-menu').forEach(el => {
        el.classList.remove('d-none');
      });
      
      const userDropdown = document.querySelector('.user-dropdown');
      if (userDropdown) {
        userDropdown.classList.remove('d-none');
      }
      
      // Ẩn menu khách
      document.querySelectorAll('.guest-menu').forEach(el => {
        el.classList.add('d-none');
      });
      
      // Hiển thị menu admin nếu là admin
      if (payload.username === 'admin') {
        document.querySelectorAll('.admin-menu').forEach(el => {
          el.classList.remove('d-none');
        });
      }
    } catch (error) {
      console.error('[header.js] Error processing token:', error);
      localStorage.removeItem('token');
    }
  }
</script> 