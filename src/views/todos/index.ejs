<%- include('../partials/header') %>

<div class="container-fluid">
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-sm-flex align-items-center justify-content-between">
        <div>
          <h1 class="h3 mb-2 text-gray-800">Todos</h1>
          <p class="mb-4 text-muted">Manage and track your tasks efficiently</p>
        </div>
        <a href="/todos/create" class="btn btn-primary d-flex align-items-center">
          <i class="fas fa-plus me-2"></i> Create New Todo
        </a>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-white py-3">
          <div class="row align-items-center">
            <div class="col-md-6 mb-3 mb-md-0">
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" id="searchInput" class="form-control border-start-0 ps-0" placeholder="Search todos..." aria-label="Search">
              </div>
            </div>
            <div class="col-md-6">
              <div class="d-flex gap-2">
                <select id="statusFilter" class="form-select">
                  <option value="">All Status</option>
                  <option value="pending">Pending</option>
                  <option value="completed">Completed</option>
                </select>
                <select id="priorityFilter" class="form-select">
                  <option value="">All Priorities</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
            </div>
          </div>
        </div>
        
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover align-middle mb-0" id="todosTable">
              <thead class="bg-light">
                <tr>
                  <th class="border-0 rounded-start ps-4">Title</th>
                  <th class="border-0">Description</th>
                  <th class="border-0" style="width: 120px;">Due Date</th>
                  <th class="border-0" style="width: 100px;">Priority</th>
                  <th class="border-0" style="width: 100px;">Status</th>
                  <th class="border-0">Tags</th>
                  <th class="border-0 rounded-end text-center" style="width: 120px;">Actions</th>
                </tr>
              </thead>
              <tbody id="todosList">
                <tr>
                  <td colspan="7" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <!-- Empty State -->
          <div id="emptyState" class="text-center py-5 d-none">
            <img src="/img/empty-todo.svg" alt="No todos" class="mb-4" style="width: 180px;">
            <h5 class="text-muted mb-2">No Todos Found</h5>
            <p class="text-muted mb-4">Start by creating your first todo or try a different filter.</p>
            <a href="/todos/create" class="btn btn-primary">
              <i class="fas fa-plus me-2"></i> Create New Todo
            </a>
          </div>
        </div>
        
        <!-- Pagination -->
        <div class="card-footer bg-white border-0 py-3">
          <nav aria-label="Todo pagination">
            <ul class="pagination justify-content-center mb-0" id="pagination">
              <!-- Pagination will be populated here via JavaScript -->
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .table > :not(caption) > * > * {
    padding: 1rem;
  }
  
  .table > tbody > tr > td {
    vertical-align: middle;
    color: #495057;
  }
  
  .table > tbody > tr:hover {
    background-color: rgba(var(--bs-primary-rgb), 0.05);
  }
  
  .badge {
    font-weight: 500;
    padding: 0.5em 0.75em;
  }
  
  .btn-group-sm .btn {
    padding: 0.4rem;
    line-height: 1;
  }
  
  .btn-group-sm .btn i {
    font-size: 0.875rem;
  }
  
  .form-select, .form-control {
    padding: 0.6rem 1rem;
    font-size: 0.9rem;
  }
  
  .input-group-text {
    padding: 0.6rem 1rem;
    background-color: #fff;
  }
  
  .badge.bg-info {
    background-color: rgba(var(--bs-info-rgb), 0.1) !important;
    color: var(--bs-info);
    border: 1px solid rgba(var(--bs-info-rgb), 0.2);
  }
  
  .pagination {
    margin-bottom: 0;
  }
  
  .pagination .page-link {
    padding: 0.5rem 0.75rem;
    color: var(--bs-primary);
    border: none;
    margin: 0 0.2rem;
    border-radius: 0.5rem;
  }
  
  .pagination .page-link:hover {
    background-color: rgba(var(--bs-primary-rgb), 0.1);
  }
  
  .pagination .page-item.active .page-link {
    background-color: var(--bs-primary);
    color: #fff;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let currentStatus = '';
    let currentPriority = '';
    let currentSearch = '';
    
    const todosList = document.getElementById('todosList');
    const emptyState = document.getElementById('emptyState');
    const pagination = document.getElementById('pagination');
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    
    // Function to load todos
    function loadTodos() {
      // Build query string
      const queryParams = new URLSearchParams({
        page: currentPage,
        limit: 10
      });
      
      if (currentStatus) {
        queryParams.append('status', currentStatus);
      }
      
      if (currentPriority) {
        queryParams.append('priority', currentPriority);
      }
      
      if (currentSearch) {
        queryParams.append('search', currentSearch);
      }
      
      // Show loading indicator
      todosList.innerHTML = `
        <tr>
          <td colspan="7" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </td>
        </tr>
      `;
      
      // Hide empty state while loading
      emptyState.classList.add('d-none');
      
      // Fetch todos
      fetch(`/api/todos?${queryParams.toString()}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const { todos, totalPages, currentPage: page } = data.data;
            
            if (todos && todos.length > 0) {
              // Show table, hide empty state
              todosList.closest('.table-responsive').classList.remove('d-none');
              emptyState.classList.add('d-none');
              
              // Render todos
              let html = '';
              
              todos.forEach(todo => {
                const dueDate = todo.due_date ? new Date(todo.due_date).toLocaleDateString() : 'No due date';
                const priorityClass = todo.priority === 'high' ? 'danger' : 
                                    todo.priority === 'medium' ? 'warning' : 'success';
                const statusClass = todo.is_completed ? 'success' : 'primary';
                
                let tags = 'No tags';
                if (todo.tags) {
                  if (typeof todo.tags === 'string') {
                    tags = todo.tags.split(',').map(tag => `<span class="badge bg-info me-1">${tag.trim()}</span>`).join('');
                  } else if (Array.isArray(todo.tags)) {
                    tags = todo.tags.map(tag => `<span class="badge bg-info me-1">${tag.trim()}</span>`).join('');
                  }
                }
                
                html += `
                  <tr>
                    <td class="ps-4">
                      <div class="d-flex align-items-center">
                        <div class="form-check">
                          <input type="checkbox" class="form-check-input" ${todo.is_completed ? 'checked' : ''} disabled>
                        </div>
                        <span class="ms-3 ${todo.is_completed ? 'text-decoration-line-through text-muted' : ''}">${todo.title}</span>
                      </div>
                    </td>
                    <td class="text-muted">${todo.description || 'No description'}</td>
                    <td>
                      <span class="badge bg-light text-dark">
                        <i class="far fa-calendar-alt me-1"></i> ${dueDate}
                      </span>
                    </td>
                    <td>
                      <span class="badge bg-${priorityClass}-subtle text-${priorityClass}">
                        ${todo.priority.charAt(0).toUpperCase() + todo.priority.slice(1)}
                      </span>
                    </td>
                    <td>
                      <span class="badge bg-${statusClass}-subtle text-${statusClass}">
                        ${todo.is_completed ? 'Completed' : 'Pending'}
                      </span>
                    </td>
                    <td>${tags}</td>
                    <td>
                      <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-light toggle-status-btn" data-id="${todo.id}" data-status="${todo.is_completed}" title="${todo.is_completed ? 'Mark as Pending' : 'Mark as Completed'}">
                          <i class="fas ${todo.is_completed ? 'fa-times' : 'fa-check'} ${todo.is_completed ? 'text-danger' : 'text-success'}"></i>
                        </button>
                        <button type="button" class="btn btn-light edit-btn" data-id="${todo.id}" title="Edit">
                          <i class="fas fa-edit text-primary"></i>
                        </button>
                        <button type="button" class="btn btn-light delete-btn" data-id="${todo.id}" title="Delete">
                          <i class="fas fa-trash text-danger"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                `;
              });
              
              todosList.innerHTML = html;
              
              // Render pagination
              renderPagination(totalPages, page);
              
              // Add event listeners to buttons
              addEventListeners();
            } else {
              // Hide table, show empty state
              todosList.closest('.table-responsive').classList.add('d-none');
              emptyState.classList.remove('d-none');
              pagination.innerHTML = '';
            }
          }
        })
        .catch(error => {
          console.error('Error loading todos:', error);
          todosList.innerHTML = `
            <tr>
              <td colspan="7" class="text-center text-danger py-5">
                <i class="fas fa-exclamation-circle mb-3 d-block" style="font-size: 2rem;"></i>
                Error loading todos. Please try again.
              </td>
            </tr>
          `;
        });
    }
    
    // Function to render pagination
    function renderPagination(totalPages, currentPage) {
      if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
      }
      
      let html = '';
      
      // Previous button
      html += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
      `;
      
      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        if (
          i === 1 || // First page
          i === totalPages || // Last page
          (i >= currentPage - 1 && i <= currentPage + 1) // Pages around current
        ) {
          html += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
              <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
          `;
        } else if (
          i === currentPage - 2 ||
          i === currentPage + 2
        ) {
          html += `
            <li class="page-item disabled">
              <span class="page-link">...</span>
            </li>
          `;
        }
      }
      
      // Next button
      html += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
      `;
      
      pagination.innerHTML = html;
      
      // Add click events to pagination
      const pageLinks = document.querySelectorAll('.page-link');
      pageLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          if (this.parentElement.classList.contains('disabled')) {
            return;
          }
          
          const page = parseInt(this.getAttribute('data-page'));
          if (page >= 1 && page <= totalPages) {
            currentPage = page;
            loadTodos();
          }
        });
      });
    }
    
    // Function to add event listeners to todo action buttons
    function addEventListeners() {
      // Toggle status buttons
      const toggleStatusBtns = document.querySelectorAll('.toggle-status-btn');
      toggleStatusBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const todoId = this.getAttribute('data-id');
          const isCompleted = this.getAttribute('data-status') === 'true';
          
          // Update todo status
          fetch(`/api/todos/${todoId}/complete`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isCompleted: !isCompleted })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              loadTodos();
            } else {
              showToast('error', data.message || 'Error updating todo status');
            }
          })
          .catch(error => {
            console.error('Error updating todo status:', error);
            showToast('error', 'Error updating todo status');
          });
        });
      });
      
      // Delete buttons
      const deleteBtns = document.querySelectorAll('.delete-btn');
      deleteBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          if (confirm('Are you sure you want to delete this todo?')) {
            const todoId = this.getAttribute('data-id');
            
            // Delete todo
            fetch(`/api/todos/${todoId}`, {
              method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                loadTodos();
                showToast('success', 'Todo deleted successfully');
              } else {
                showToast('error', data.message || 'Error deleting todo');
              }
            })
            .catch(error => {
              console.error('Error deleting todo:', error);
              showToast('error', 'Error deleting todo');
            });
          }
        });
      });
      
      // Edit buttons
      const editBtns = document.querySelectorAll('.edit-btn');
      editBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const todoId = this.getAttribute('data-id');
          window.location.href = `/todos/edit/${todoId}`;
        });
      });
    }
    
    // Function to show toast notification
    function showToast(type, message) {
      // You can implement your own toast notification here
      alert(message);
    }
    
    // Event listeners for filters
    searchInput.addEventListener('input', debounce(function() {
      currentSearch = this.value.trim();
      currentPage = 1;
      loadTodos();
    }, 300));
    
    statusFilter.addEventListener('change', function() {
      currentStatus = this.value;
      currentPage = 1;
      loadTodos();
    });
    
    priorityFilter.addEventListener('change', function() {
      currentPriority = this.value;
      currentPage = 1;
      loadTodos();
    });
    
    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    // Get query parameters from URL
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('status')) {
      currentStatus = urlParams.get('status');
      statusFilter.value = currentStatus;
    }
    
    if (urlParams.has('priority')) {
      currentPriority = urlParams.get('priority');
      priorityFilter.value = currentPriority;
    }
    
    // Initial load
    loadTodos();
  });
</script>

<%- include('../partials/footer') %> 