<%- include('../partials/header') %>

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3">Todos</h1>
    <a href="/todos/view/create" class="btn btn-primary">
      <i class="fas fa-plus"></i> Add Todo
    </a>
  </div>
  
  <div class="card shadow mb-4">
    <div class="card-header py-3 d-flex justify-content-between align-items-center">
      <h6 class="m-0 fw-bold text-primary">Todo List</h6>
      <div class="d-flex">
        <div class="input-group me-2">
          <input type="text" id="searchInput" class="form-control" placeholder="Search..." aria-label="Search">
          <button class="btn btn-outline-secondary" type="button" id="searchButton">
            <i class="fas fa-search"></i>
          </button>
        </div>
        <select id="statusFilter" class="form-select me-2">
          <option value="">All Status</option>
          <option value="pending">Pending</option>
          <option value="completed">Completed</option>
        </select>
        <select id="priorityFilter" class="form-select">
          <option value="">All Priorities</option>
          <option value="high">High</option>
          <option value="medium">Medium</option>
          <option value="low">Low</option>
        </select>
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-bordered table-hover" id="todosTable" width="100%" cellspacing="0">
          <thead>
            <tr>
              <th>Title</th>
              <th>Description</th>
              <th>Due Date</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Tags</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="todosList">
            <!-- Todo items will be populated here via JavaScript -->
            <tr>
              <td colspan="7" class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <!-- Pagination -->
      <nav aria-label="Todo pagination" class="mt-4">
        <ul class="pagination justify-content-center" id="pagination">
          <!-- Pagination will be populated here via JavaScript -->
        </ul>
      </nav>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    
    if (!token) {
      window.location.href = '/auth/login';
      return;
    }
    
    let currentPage = 1;
    let currentStatus = '';
    let currentPriority = '';
    let currentSearch = '';
    
    const todosList = document.getElementById('todosList');
    const pagination = document.getElementById('pagination');
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    
    // Function to load todos
    function loadTodos() {
      // Build query string
      const queryParams = new URLSearchParams({
        page: currentPage,
        limit: 10
      });
      
      if (currentStatus) {
        queryParams.append('status', currentStatus);
      }
      
      if (currentPriority) {
        queryParams.append('priority', currentPriority);
      }
      
      if (currentSearch) {
        queryParams.append('search', currentSearch);
      }
      
      // Fetch todos
      fetch(`/todos?${queryParams.toString()}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => {
        console.log('API response status:', response.status, response.statusText);
        return response.json();
      })
      .then(data => {
        console.log('API response data:', data);
        if (data.success) {
          const { todos, totalPages, currentPage: page } = data.data;
          
          if (todos && todos.length > 0) {
            // Render todos
            let html = '';
            
            todos.forEach(todo => {
              const dueDate = todo.due_date ? new Date(todo.due_date).toLocaleDateString() : 'No due date';
              const priorityClass = todo.priority === 'high' ? 'danger' : 
                                   todo.priority === 'medium' ? 'warning' : 'success';
              const statusClass = todo.is_completed ? 'success' : 'secondary';
              const tags = todo.tags && todo.tags.length > 0 ? 
                          todo.tags.split(',').map(tag => `<span class="badge bg-info me-1">${tag.trim()}</span>`).join('') : 
                          'No tags';
              
              html += `
                <tr>
                  <td>${todo.title}</td>
                  <td>${todo.description || 'No description'}</td>
                  <td>${dueDate}</td>
                  <td><span class="badge bg-${priorityClass}">${todo.priority}</span></td>
                  <td><span class="badge bg-${statusClass}">${todo.is_completed ? 'Completed' : 'Pending'}</span></td>
                  <td>${tags}</td>
                  <td>
                    <div class="btn-group btn-group-sm" role="group">
                      <button type="button" class="btn btn-outline-primary toggle-status-btn" data-id="${todo.id}" data-status="${todo.is_completed}">
                        <i class="fas ${todo.is_completed ? 'fa-times' : 'fa-check'}"></i>
                      </button>
                      <a href="/todos/view/edit/${todo.id}" class="btn btn-outline-secondary">
                        <i class="fas fa-edit"></i>
                      </a>
                      <button type="button" class="btn btn-outline-danger delete-btn" data-id="${todo.id}">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              `;
            });
            
            todosList.innerHTML = html;
            
            // Render pagination
            renderPagination(totalPages, page);
            
            // Add event listeners to buttons
            addEventListeners();
          } else {
            todosList.innerHTML = `
              <tr>
                <td colspan="7" class="text-center">No todos found</td>
              </tr>
            `;
            pagination.innerHTML = '';
          }
        } else {
          todosList.innerHTML = `
            <tr>
              <td colspan="7" class="text-center text-danger">${data.message}</td>
            </tr>
          `;
          pagination.innerHTML = '';
        }
      })
      .catch(error => {
        console.error('Error fetching todos:', error);
        todosList.innerHTML = `
          <tr>
            <td colspan="7" class="text-center text-danger">Error loading todos</td>
          </tr>
        `;
        pagination.innerHTML = '';
      });
    }
    
    // Function to render pagination
    function renderPagination(totalPages, currentPage) {
      let html = '';
      
      // Previous button
      html += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
      `;
      
      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        html += `
          <li class="page-item ${currentPage === i ? 'active' : ''}">
            <a class="page-link" href="#" data-page="${i}">${i}</a>
          </li>
        `;
      }
      
      // Next button
      html += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>
      `;
      
      pagination.innerHTML = html;
      
      // Add event listeners to pagination links
      const pageLinks = document.querySelectorAll('.page-link');
      pageLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          const page = parseInt(this.getAttribute('data-page'));
          
          if (page >= 1 && page <= totalPages) {
            currentPage = page;
            loadTodos();
          }
        });
      });
    }
    
    // Function to add event listeners to todo action buttons
    function addEventListeners() {
      // Toggle status buttons
      const toggleStatusBtns = document.querySelectorAll('.toggle-status-btn');
      toggleStatusBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const todoId = this.getAttribute('data-id');
          const isCompleted = this.getAttribute('data-status') === 'true';
          
          // Update todo status
          fetch(`/todos/${todoId}/complete`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ isCompleted: !isCompleted })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Reload todos
              loadTodos();
            } else {
              alert(data.message);
            }
          })
          .catch(error => {
            console.error('Error updating todo status:', error);
            alert('Error updating todo status');
          });
        });
      });
      
      // Delete buttons
      const deleteBtns = document.querySelectorAll('.delete-btn');
      deleteBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          if (confirm('Are you sure you want to delete this todo?')) {
            const todoId = this.getAttribute('data-id');
            
            // Delete todo
            fetch(`/todos/${todoId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // Reload todos
                loadTodos();
              } else {
                alert(data.message);
              }
            })
            .catch(error => {
              console.error('Error deleting todo:', error);
              alert('Error deleting todo');
            });
          }
        });
      });
    }
    
    // Event listeners for filters
    searchButton.addEventListener('click', function() {
      currentSearch = searchInput.value.trim();
      currentPage = 1;
      loadTodos();
    });
    
    searchInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        currentSearch = searchInput.value.trim();
        currentPage = 1;
        loadTodos();
      }
    });
    
    statusFilter.addEventListener('change', function() {
      currentStatus = this.value;
      currentPage = 1;
      loadTodos();
    });
    
    priorityFilter.addEventListener('change', function() {
      currentPriority = this.value;
      currentPage = 1;
      loadTodos();
    });
    
    // Get query parameters from URL
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('status')) {
      currentStatus = urlParams.get('status');
      statusFilter.value = currentStatus;
    }
    
    if (urlParams.has('priority')) {
      currentPriority = urlParams.get('priority');
      priorityFilter.value = currentPriority;
    }
    
    // Initial load
    loadTodos();
  });
</script>

<%- include('../partials/footer') %> 